---
const cardData = [
{
    id: "pihace",
    tabs: [
      {
        id: "about",
        title: "About",
        selected: true,
        content: {
          heading: "Python Integrated Health Check (pihace)",
          paragraph: "Python Integrated Health Check (pihace) is a modular and extensible Python library for system and service health monitoring. It helps you build consistent, informative, and developer-friendly health check endpoints or tools across your applications and infrastructure.",
          link: { href: "https://github.com/ahmadzeinalwafi/pihace", text: "Discover more" }
        }
      },
      {
        id: "features",
        title: "Features",
        selected: false,
        content: [
        "‚úÖ Built-in system checks: CPU, memory, disk usage, Python version, OS",
        "üì¶ Modular service checks: MySQL, MongoDB, InfluxDB, and more",
        "üß© Custom check functions",
        "üßæ Unified health output format",
        "üêç Pythonic API design",
        "üîß Extensible with easy register() method",
        ]
      },
      {
        id: "integration-support",
        title: "Integration Support",
        selected: false,
        content: [
          "‚úÖ MySQL",
          "‚úÖ MongoDB",
          "‚úÖ InfluxDB",
          "üß© Custom check functions"
        ]
      }
    ]
  },
  {
    id: "node-sphere-backend",
    tabs: [
      {
        id: "about",
        title: "About",
        selected: true,
        content: {
          heading: "Node Sphere Back End",
          paragraph: "Node Sphere Backend is a lightweight, scalable, and modular platform built to monitor, manage, and analyze IoT devices in real time. It provides a robust backend architecture with clean separation of concerns, seamless health monitoring, and integrations with popular messaging and time-series systems.",
          link: { href: "https://github.com/ahmadzeinalwafi/embbeded-sensor-dms-backend", text: "Discover more" }
        }
      },
      {
        id: "features",
        title: "Features",
        selected: false,
        content: [
        "‚úÖ Device registration & lifecycle management",
        "üì° Real-time data ingestion via MQTT / HTTP",
        "üìä Time-series storage with InfluxDB" ,
        "üîç Device metadata storage using MongoDB ",
        "‚ù§Ô∏è Health check system using health-go plugins" ,
        "üß© Modular, clean architecture with dependency injection" ,
        "üîê API-ready for secure device communication and frontend dashboards",
        ]
      },
      {
        id: "technology",
        title: "Technology",
        selected: false,
        content: [
          "‚ñ∂Ô∏è net/http",
          "‚ñ∂Ô∏è golang-jwt/jwt/v4",
          "‚ñ∂Ô∏è paho.mqtt.golang",
          "‚ñ∂Ô∏è go-playground/validator/v10",
          "‚ñ∂Ô∏è golang.org/x/crypto",
        ]
      }
    ]
  },
  {
    id: "node-sphere-frontend",
    tabs: [
      {
        id: "about",
        title: "About",
        selected: true,
        content: {
          heading: "Node Sphere Front End",
          paragraph: "Node Sphere Frontend is the user interface for the Node Sphere platform ‚Äî a modern and modular dashboard designed to monitor and manage IoT devices in real-time. Built with Next.js, Tailwind CSS, and Atomic Design principles (more or less), this frontend delivers a seamless user experience for visualizing device status, data statistics, and historical data.",
          link: { href: "https://node-sphere.vercel.app/", text: "Discover more" }
        }
      },
      {
        id: "features",
        title: "Features",
        selected: false,
        content: [
        "‚ö° Real-time Device Monitoring ‚Äî View device status, metrics, and historical data in real time.",
        "üìä Charts and Graphs ‚Äî Visualize IoT device metrics over time with beautiful charts.",
        "üîí User-Friendly Authentication ‚Äî Easy login and session management with Next.js.",
        "üß© Modular Component ‚Äî Modular and reusable components for a scalable design system.",
        ]
      },
      {
        id: "technology",
        title: "Technology",
        selected: false,
        content: [
          "‚ñ∂Ô∏è Next.js",
          "‚ñ∂Ô∏è Tailwind CSS",
          "‚ñ∂Ô∏è DaisyUI",
          "‚ñ∂Ô∏è @next/mdx",
          "‚ñ∂Ô∏è chart.js",
        ]
      }
    ]
  },
];
---
<div class="mt-24">
{cardData.map((card) => (
  <div class="w-8/12 mx-auto my-10 bg-white border border-gray-200 rounded-lg shadow-sm dark:bg-gray-800 dark:border-gray-700">
    <!-- Tabs Header -->
    <ul class="flex flex-wrap text-sm font-medium text-center text-gray-500 border-b border-gray-200 rounded-t-lg bg-gray-50 dark:border-gray-700 dark:text-gray-400 dark:bg-gray-800" id={`tabs-${card.id}`} data-tabs-toggle={`#tabsContent-${card.id}`} role="tablist">
      {card.tabs.map((tab) => (
        <li class="me-2">
          <button
            id={`${card.id}-${tab.id}-tab`}
            data-tabs-target={`#${card.id}-${tab.id}`}
            type="button"
            role="tab"
            aria-controls={`${card.id}-${tab.id}`}
            aria-selected={tab.selected ? "true" : "false"}
            class={`inline-block p-4 ${
              tab.selected
                ? "text-blue-600 rounded-ss-lg hover:bg-gray-100 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-blue-500"
                : "hover:text-gray-600 hover:bg-gray-100 dark:hover:bg-gray-700 dark:hover:text-gray-300"
            }`}
          >
            {tab.title}
          </button>
        </li>
      ))}
    </ul>

    <!-- Tabs Content -->
    <div id={`tabsContent-${card.id}`}>
      {card.tabs.map((tab) => (
        <div
          class={`p-4 bg-white md:p-8 dark:bg-gray-800 ${tab.selected ? "" : "hidden"}`}
          id={`${card.id}-${tab.id}`}
          role="tabpanel"
          aria-labelledby={`${card.id}-${tab.id}-tab`}
        >
          {typeof tab.content === "object" && !Array.isArray(tab.content) ? (
            <>
              <h2 class="mb-3 text-3xl font-extrabold tracking-tight text-gray-900 dark:text-white">{tab.content.heading}</h2>
              <p class="mb-3 text-gray-500 dark:text-gray-400">{tab.content.paragraph}</p>
              <a href={tab.content.link.href} class="inline-flex items-center font-medium text-blue-600 hover:text-blue-800 dark:text-blue-500 dark:hover:text-blue-700">
                {tab.content.link.text}
                <svg class="w-2.5 h-2.5 ms-2 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                  <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
                </svg>
              </a>
            </>
          ) : (
            <>
              <h2 class="mb-5 text-2xl font-extrabold tracking-tight text-gray-900 dark:text-white">
                {tab.title}
              </h2>
              <ul role="list" class="space-y-4 text-gray-500 dark:text-gray-400">
                {tab.content.map((item) => (
                  <li class="flex space-x-2 rtl:space-x-reverse items-center">
                    <span class="leading-tight">{item}</span>
                  </li>
                ))}
              </ul>
            </>
          )}
        </div>
      ))}
    </div>
  </div>
))}
</div>
